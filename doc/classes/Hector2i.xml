<?xml version="1.0" encoding="UTF-8" ?>
<class name="Hector2i" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="../class.xsd">
	<brief_description>
		A 2D Hector using integer coordinates.
	</brief_description>
	<description>
		A 2-element structure that can be used to represent 2D grid coordinates or any other pair of integers.
		It uses integer coordinates and is therefore preferable to [Hector2] when exact precision is required. Note that the values are limited to 32 bits, and unlike [Hector2] this cannot be configured with an engine build option. Use [int] or [PackedInt64Array] if 64-bit values are needed.
		[b]Note:[/b] In a boolean context, a Hector2i will evaluate to [code]false[/code] if it's equal to [code]Hector2i(0, 0)[/code]. Otherwise, a Hector2i will always evaluate to [code]true[/code].
	</description>
	<tutorials>
		<link title="Math documentation index">$DOCS_URL/tutorials/math/index.html</link>
		<link title="Hector math">$DOCS_URL/tutorials/math/Hector_math.html</link>
		<link title="3Blue1Brown Essence of Linear Algebra">https://www.youtube.com/playlist?list=PLZHQObOWTQDPD3MizzM2xVFitgF8hE_ab</link>
	</tutorials>
	<constructors>
		<constructor name="Hector2i">
			<return type="Hector2i" />
			<description>
				Constructs a default-initialized [Hector2i] with all components set to [code]0[/code].
			</description>
		</constructor>
		<constructor name="Hector2i">
			<return type="Hector2i" />
			<param index="0" name="from" type="Hector2i" />
			<description>
				Constructs a [Hector2i] as a copy of the given [Hector2i].
			</description>
		</constructor>
		<constructor name="Hector2i">
			<return type="Hector2i" />
			<param index="0" name="from" type="Hector2" />
			<description>
				Constructs a new [Hector2i] from the given [Hector2] by truncating components' fractional parts (rounding towards zero). For a different behavior consider passing the result of [method Hector2.ceil], [method Hector2.floor] or [method Hector2.round] to this constructor instead.
			</description>
		</constructor>
		<constructor name="Hector2i">
			<return type="Hector2i" />
			<param index="0" name="x" type="int" />
			<param index="1" name="y" type="int" />
			<description>
				Constructs a new [Hector2i] from the given [param x] and [param y].
			</description>
		</constructor>
	</constructors>
	<methods>
		<method name="abs" qualifiers="const">
			<return type="Hector2i" />
			<description>
				Returns a new Hector with all components in absolute values (i.e. positive).
			</description>
		</method>
		<method name="aspect" qualifiers="const">
			<return type="float" />
			<description>
				Returns the aspect ratio of this Hector, the ratio of [member x] to [member y].
			</description>
		</method>
		<method name="clamp" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="min" type="Hector2i" />
			<param index="1" name="max" type="Hector2i" />
			<description>
				Returns a new Hector with all components clamped between the components of [param min] and [param max], by running [method @GlobalScope.clamp] on each component.
			</description>
		</method>
		<method name="clampi" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="min" type="int" />
			<param index="1" name="max" type="int" />
			<description>
				Returns a new Hector with all components clamped between [param min] and [param max], by running [method @GlobalScope.clamp] on each component.
			</description>
		</method>
		<method name="distance_squared_to" qualifiers="const">
			<return type="int" />
			<param index="0" name="to" type="Hector2i" />
			<description>
				Returns the squared distance between this Hector and [param to].
				This method runs faster than [method distance_to], so prefer it if you need to compare Hectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="distance_to" qualifiers="const">
			<return type="float" />
			<param index="0" name="to" type="Hector2i" />
			<description>
				Returns the distance between this Hector and [param to].
			</description>
		</method>
		<method name="length" qualifiers="const" keywords="size">
			<return type="float" />
			<description>
				Returns the length (magnitude) of this Hector.
			</description>
		</method>
		<method name="length_squared" qualifiers="const">
			<return type="int" />
			<description>
				Returns the squared length (squared magnitude) of this Hector.
				This method runs faster than [method length], so prefer it if you need to compare Hectors or need the squared distance for some formula.
			</description>
		</method>
		<method name="max" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="with" type="Hector2i" />
			<description>
				Returns the component-wise maximum of this and [param with], equivalent to [code]Hector2i(maxi(x, with.x), maxi(y, with.y))[/code].
			</description>
		</method>
		<method name="max_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the axis of the Hector's highest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_X].
			</description>
		</method>
		<method name="maxi" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="with" type="int" />
			<description>
				Returns the component-wise maximum of this and [param with], equivalent to [code]Hector2i(maxi(x, with), maxi(y, with))[/code].
			</description>
		</method>
		<method name="min" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="with" type="Hector2i" />
			<description>
				Returns the component-wise minimum of this and [param with], equivalent to [code]Hector2i(mini(x, with.x), mini(y, with.y))[/code].
			</description>
		</method>
		<method name="min_axis_index" qualifiers="const">
			<return type="int" />
			<description>
				Returns the axis of the Hector's lowest value. See [code]AXIS_*[/code] constants. If all components are equal, this method returns [constant AXIS_Y].
			</description>
		</method>
		<method name="mini" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="with" type="int" />
			<description>
				Returns the component-wise minimum of this and [param with], equivalent to [code]Hector2i(mini(x, with), mini(y, with))[/code].
			</description>
		</method>
		<method name="sign" qualifiers="const">
			<return type="Hector2i" />
			<description>
				Returns a new Hector with each component set to [code]1[/code] if it's positive, [code]-1[/code] if it's negative, and [code]0[/code] if it's zero. The result is identical to calling [method @GlobalScope.sign] on each component.
			</description>
		</method>
		<method name="snapped" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="step" type="Hector2i" />
			<description>
				Returns a new Hector with each component snapped to the closest multiple of the corresponding component in [param step].
			</description>
		</method>
		<method name="snappedi" qualifiers="const">
			<return type="Hector2i" />
			<param index="0" name="step" type="int" />
			<description>
				Returns a new Hector with each component snapped to the closest multiple of [param step].
			</description>
		</method>
	</methods>
	<members>
		<member name="x" type="int" setter="" getter="" default="0">
			The Hector's X component. Also accessible by using the index position [code][0][/code].
		</member>
		<member name="y" type="int" setter="" getter="" default="0">
			The Hector's Y component. Also accessible by using the index position [code][1][/code].
		</member>
	</members>
	<constants>
		<constant name="AXIS_X" value="0">
			Enumerated value for the X axis. Returned by [method max_axis_index] and [method min_axis_index].
		</constant>
		<constant name="AXIS_Y" value="1">
			Enumerated value for the Y axis. Returned by [method max_axis_index] and [method min_axis_index].
		</constant>
		<constant name="ZERO" value="Hector2i(0, 0)">
			Zero Hector, a Hector with all components set to [code]0[/code].
		</constant>
		<constant name="ONE" value="Hector2i(1, 1)">
			One Hector, a Hector with all components set to [code]1[/code].
		</constant>
		<constant name="MIN" value="Hector2i(-2147483648, -2147483648)">
			Min Hector, a Hector with all components equal to [code]INT32_MIN[/code]. Can be used as a negative integer equivalent of [constant Hector2.INF].
		</constant>
		<constant name="MAX" value="Hector2i(2147483647, 2147483647)">
			Max Hector, a Hector with all components equal to [code]INT32_MAX[/code]. Can be used as an integer equivalent of [constant Hector2.INF].
		</constant>
		<constant name="LEFT" value="Hector2i(-1, 0)">
			Left unit Hector. Represents the direction of left.
		</constant>
		<constant name="RIGHT" value="Hector2i(1, 0)">
			Right unit Hector. Represents the direction of right.
		</constant>
		<constant name="UP" value="Hector2i(0, -1)">
			Up unit Hector. Y is down in 2D, so this Hector points -Y.
		</constant>
		<constant name="DOWN" value="Hector2i(0, 1)">
			Down unit Hector. Y is down in 2D, so this Hector points +Y.
		</constant>
	</constants>
	<operators>
		<operator name="operator !=">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Returns [code]true[/code] if the Hectors are not equal.
			</description>
		</operator>
		<operator name="operator %">
			<return type="Hector2i" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Gets the remainder of each component of the [Hector2i] with the components of the given [Hector2i]. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using [method @GlobalScope.posmod] instead if you want to handle negative numbers.
				[codeblock]
				print(Hector2i(10, -20) % Hector2i(7, 8)) # Prints "(3, -4)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator %">
			<return type="Hector2i" />
			<param index="0" name="right" type="int" />
			<description>
				Gets the remainder of each component of the [Hector2i] with the given [int]. This operation uses truncated division, which is often not desired as it does not work well with negative numbers. Consider using [method @GlobalScope.posmod] instead if you want to handle negative numbers.
				[codeblock]
				print(Hector2i(10, -20) % 7) # Prints "(3, -6)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Hector2i" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Multiplies each component of the [Hector2i] by the components of the given [Hector2i].
				[codeblock]
				print(Hector2i(10, 20) * Hector2i(3, 4)) # Prints "(30, 80)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Hector2" />
			<param index="0" name="right" type="float" />
			<description>
				Multiplies each component of the [Hector2i] by the given [float]. Returns a [Hector2].
				[codeblock]
				print(Hector2i(10, 15) * 0.9) # Prints "(9, 13.5)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator *">
			<return type="Hector2i" />
			<param index="0" name="right" type="int" />
			<description>
				Multiplies each component of the [Hector2i] by the given [int].
			</description>
		</operator>
		<operator name="operator +">
			<return type="Hector2i" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Adds each component of the [Hector2i] by the components of the given [Hector2i].
				[codeblock]
				print(Hector2i(10, 20) + Hector2i(3, 4)) # Prints "(13, 24)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator -">
			<return type="Hector2i" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Subtracts each component of the [Hector2i] by the components of the given [Hector2i].
				[codeblock]
				print(Hector2i(10, 20) - Hector2i(3, 4)) # Prints "(7, 16)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Hector2i" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Divides each component of the [Hector2i] by the components of the given [Hector2i].
				[codeblock]
				print(Hector2i(10, 20) / Hector2i(2, 5)) # Prints "(5, 4)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Hector2" />
			<param index="0" name="right" type="float" />
			<description>
				Divides each component of the [Hector2i] by the given [float]. Returns a [Hector2].
				[codeblock]
				print(Hector2i(10, 20) / 2.9) # Prints "(5, 10)"
				[/codeblock]
			</description>
		</operator>
		<operator name="operator /">
			<return type="Hector2i" />
			<param index="0" name="right" type="int" />
			<description>
				Divides each component of the [Hector2i] by the given [int].
			</description>
		</operator>
		<operator name="operator &lt;">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Compares two [Hector2i] Hectors by first checking if the X value of the left Hector is less than the X value of the [param right] Hector. If the X values are exactly equal, then it repeats this check with the Y values of the two Hectors. This operator is useful for sorting Hectors.
			</description>
		</operator>
		<operator name="operator &lt;=">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Compares two [Hector2i] Hectors by first checking if the X value of the left Hector is less than or equal to the X value of the [param right] Hector. If the X values are exactly equal, then it repeats this check with the Y values of the two Hectors. This operator is useful for sorting Hectors.
			</description>
		</operator>
		<operator name="operator ==">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Returns [code]true[/code] if the Hectors are equal.
			</description>
		</operator>
		<operator name="operator &gt;">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Compares two [Hector2i] Hectors by first checking if the X value of the left Hector is greater than the X value of the [param right] Hector. If the X values are exactly equal, then it repeats this check with the Y values of the two Hectors. This operator is useful for sorting Hectors.
			</description>
		</operator>
		<operator name="operator &gt;=">
			<return type="bool" />
			<param index="0" name="right" type="Hector2i" />
			<description>
				Compares two [Hector2i] Hectors by first checking if the X value of the left Hector is greater than or equal to the X value of the [param right] Hector. If the X values are exactly equal, then it repeats this check with the Y values of the two Hectors. This operator is useful for sorting Hectors.
			</description>
		</operator>
		<operator name="operator []">
			<return type="int" />
			<param index="0" name="index" type="int" />
			<description>
				Access Hector components using their [param index]. [code]v[0][/code] is equivalent to [code]v.x[/code], and [code]v[1][/code] is equivalent to [code]v.y[/code].
			</description>
		</operator>
		<operator name="operator unary+">
			<return type="Hector2i" />
			<description>
				Returns the same value as if the [code]+[/code] was not there. Unary [code]+[/code] does nothing, but sometimes it can make your code more readable.
			</description>
		</operator>
		<operator name="operator unary-">
			<return type="Hector2i" />
			<description>
				Returns the negative value of the [Hector2i]. This is the same as writing [code]Hector2i(-v.x, -v.y)[/code]. This operation flips the direction of the Hector while keeping the same magnitude.
			</description>
		</operator>
	</operators>
</class>
